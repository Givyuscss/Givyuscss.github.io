---
layout:     post
title:      "关联规则"
subtitle:   " \"寻找频繁集\""
date:       2019-09-28 12:00:00
author:     "Givyuscss"
header-img: "img/post-bg-js-module.jpg"
tags:
    - Machine Learning
---

## 关联规则

---

+ **关联规则基本概念**

	关联规则用来形容两个时间之间的关系:$$X\mapsto Y$$

	关联规则有如下几个指标：

	支持度:$$Support(X,Y)=\frac{num(XY)}{num(total)}=P(XY)$$

	置信度:$$Confidence(X,Y)=P(X\vert Y)=\frac{P(XY)}{P(Y)}，Confidence(Y,X)=P(Y\vert X)=\frac{P(XY)}{P(X)}$$

	提升度:$$lift(X\Leftarrow Y)=\frac{P(X\vert Y)}{X}$$

### Apriori算法
	
Apriori算法是为了寻找样本中的频繁集，即支持度大于最小阈值的组合。

Apriori提出两条规则：
1. 若一个集合是频繁集，则它的子集都是频繁集
2. 若一个集合不是频繁集，则它的超集都不是频繁集

Apriori算法步骤：
针对记录T:

TID|Items
:-: | :-:
T1|l1,l3,l4
T2|l2,l3,l5
T3|l1,l2,l3,l5
T4|l2,l5

1. 首先扫描所有的事物，对记录中每个项进行计数得到候选项集记为$$C1$$。

项集|支持度计数
:-: | :-:	
{l1}|2
{l2}|3
{l3}|3
{l4}|1
{l5}|3

2. 对支持度计数和支持度的阈值进行比较，剔除小于支持度阈值的项集，得出频繁1项集记作$$L1$$。(假设阈值为2)

项集|支持度计数
:-: | :-:	
{l1}|2
{l2}|3
{l3}|3
{l5}|3

3. 使用连接来产生候选项集2项集。剪掉项集中包含不频繁项的项集。剔除支持度计数小于阈值的项，得出频繁2项集$$L2$$。

项集|支持度计数
:-: | :-:	
{l1,l3}|2
{l2,l3}|2
{l2,l5}|3
{l3,l5}|2

4. 重复2、3步直到下一个候选集为空。
5. 得出所有的频繁项集。

### FP-Growth算法

对于大型的数据集，Apriori的计算速度显然过于太慢，FP-Groth只需遍历数据集两边，相比于Apriori速度得到了很大的提升。

**算法流程**

1. 遍历数据集，得到频繁项为1的项目集，定义最小支持度，删除小于最小支持度的项目，将条目按项目集中的频次降序进行排列。
2. 再次，创建项头表，以及FP树。
3. 于找到每个项目条件模式基,递归调用树结构，删除小于最小支持度的项。如果最终呈现单一路径的树结构，则直接列举所有组合；非单一路径的则继续调用树结构，直到形成单一路径即可。

**示例**

数据清单为：

Tid	|Items
:-:|:-:
1	|I1, I2, I5
2	|I2, I4
3	|I2, I3
4	|I1, I2, I4
5	|I1, I3
6	|I2, I3
7	|I1, I3
8	|I1, I2, I3, I5
9	|I1, I2, I3

+ **构建FP树**
	
	a. 遍历数据集，物品进行计数
	
	I1|	I2|	I3|	I4|	I5
	:-:|:-:|:-:|:-:|:-:
	6|	7|	6|	2|	2

	b. 设定最小支持度为2，降序排列物品表

	I2|	I1|	I3|	I4|	I5
	:-:|:-:|:-:|:-:|:-:
	7|	6|	6|	2|	2

	c. 根据物品出现次数调整清单

	Tid|	Items
	:-:|:-:
	1|	I2, I1, I5
	2|	I2, I4
	3|	I2, I3
	4|	I2, I1, I4
	5|	I1, I3
	6|	I2, I3
	7|	I1, I3
	8|	I2, I1, I3, I5
	9|	I2, I1, I3

	d. 构建FP树

	加入清单，出现相同的节点则进行累加。由于所有清单的物品顺序都是从高到低的，因此靠前的物品都更靠近树根。

<img src="/img/in-post/FP-Growth/1.png" width="400px" height="300px"/>

+ **挖掘频繁集**

	&emsp;&emsp;对于每一个元素项，获取其对应的条件模式基。条件模式基是以所查找元素项为结尾的路径集合。每一条路径其实都是一条前缀路径。按照从下往上的顺序，考虑两个例子。

	（1）考虑I5，得到条件模式基{(I2 I1:1), (I2 I1 I3)}, 然后递归调用FP-growth，模式后缀为I5。这个条件FP树是单路径的，在FP-growth中直接列举{I2:2，I1:2，I3:1}的所有组合，之后和模式后缀I5取并集得到支持度大于2的所有模式：{ I2 I5:2, I1 I5:2, I2 I1 I5:2}。

	<img src="/img/in-post/FP-Growth/2.png" width="400px" height="300px"/>

	（2）考虑I3，I3的条件模式基是{(I2 I1:2), (I2:2), (I1:2)}，然后递归调用FP-growth，模式前缀为I3。

	&emsp;&emsp;I3的条件FP树是一个多路径树，首先把模式后缀I3和条件FP树中的项头表中的每一项取并集，得到一组模式{I2 I3:4, I1 I3:4}，但是这一组不是后缀为I3的所有模式。还需要递归调用FP-growth，模式后缀为{I1，I3}，{I1，I3}的条件模式基为{I2：2}。这是一个单路径的条件FP-树，在FP-growth中把I2和模式后缀{I1，I3}取并得到模式{I1 I2 I3：2}。

	&emsp;&emsp;最终模式后缀I3的支持度大于2的所有模式为：{ I2 I3:4, I1 I3:4, I1 I2 I3:2}

	<img src="/img/in-post/FP-Growth/3.png" width="400px" height="300px"/>	

	最终得到的支持度大于2频繁模式如下：

	item|	条件模式基|	条件FP树	|产生的频繁模式
	:-:|:-:|:-:|:-:
	I5|	{(I2 I1:1),(I2 I1 I3:1)}|	(I2:2, I1:2)|	I2 I5:2, I1 I5:2, I2 I1 I5:2
	I4|	{(I2 I1:1), (I2:1)}|	(I2:2)|	I2 I4:2
	I3|	{(I2 I1:2), (I2:2), (I1:2)}|	(I2:4, I1:2), (I1:2)|	I2 I3:4, I1 I3:4, I2 I1 I3:2
	I1|	{(I2:4)}|	(I2:4)|	I2 I1:4

#### 代码实现

读取数据为：
<img src="/img/in-post/FP-Growth/4.png" width="1000px" height="500px"/>

```python

data = []
with open('shopping_cart.csv',encoding='gbk') as f:
    lines = f.readlines()
    for line in lines:
        data.append(line.strip().split('，'))

class treeNode:
    def __init__(self, nameValue, numOccur, parentNode):
        self.name = nameValue
        self.count = numOccur
        self.nodeLink = None
        self.parent = parentNode
        self.children = {}
    def inc(self, numOccur):
        self.count += numOccur
    def disp(self, ind=1):
        print ('  ' * ind, self.name, ' ', self.count)
        for child in self.children.values():
            child.disp(ind + 1)
def updateHeader(nodeToTest, targetNode):
    while nodeToTest.nodeLink != None:
        nodeToTest = nodeToTest.nodeLink
    nodeToTest.nodeLink = targetNode
def updateFPtree(items, inTree, headerTable, count):
    if items[0] in inTree.children:
        inTree.children[items[0]].inc(count)
    else:
        inTree.children[items[0]] = treeNode(items[0], count, inTree)
        if headerTable[items[0]][1] == None:
            headerTable[items[0]][1] = inTree.children[items[0]]
        else:
            updateHeader(headerTable[items[0]][1], inTree.children[items[0]])
    if len(items) > 1:
        updateFPtree(items[1::], inTree.children[items[0]], headerTable, count)
def createFPtree(dataSet, minSup=1):
    headerTable = {}
    for trans in dataSet:
        for item in trans:
            headerTable[item] = headerTable.get(item, 0) + dataSet[trans]
    for k in list(headerTable):
        if headerTable[k] < minSup:
            del (headerTable[k])  
    freqItemSet = set(headerTable.keys())  
    if len(freqItemSet) == 0:
        return None, None
    for k in headerTable:
        headerTable[k] = [headerTable[k], None]  
    retTree = treeNode('Null Set', 1, None)
    for tranSet, count in dataSet.items():
        localD = {}
        for item in tranSet:
            if item in freqItemSet:  
                localD[item] = headerTable[item][0]  
        if len(localD) > 0:
            orderedItem = [v[0] for v in sorted(localD.items(), key=lambda p: p[1], reverse=True)]
            updateFPtree(orderedItem, retTree, headerTable, count)
    return retTree, headerTable

def createInitSet(dataSet):
    retDict = {}
    for trans in dataSet:
        key = frozenset(trans)
        if key in retDict:
            retDict[frozenset(trans)] += 1
        else:
            retDict[frozenset(trans)] = 1
    return retDict

def ascendFPtree(leafNode, prefixPath):
    if leafNode.parent != None:
        prefixPath.append(leafNode.name)
        ascendFPtree(leafNode.parent, prefixPath)

def findPrefixPath(basePat, myHeaderTab):
    treeNode = myHeaderTab[basePat][1]  
    condPats = {}
    while treeNode != None:
        prefixPath = []
        ascendFPtree(treeNode, prefixPath)  
        if len(prefixPath) > 1:
            condPats[frozenset(prefixPath[1:])] = treeNode.count  
        treeNode = treeNode.nodeLink  
    return condPats
def mineFPtree(inTree, headerTable, minSup, preFix, freqItemList):
    
    bigL = [v[0] for v in sorted(headerTable.items(), key=lambda p: p[1][0])]# 排序条件应该为p:p[1][0]，样例中的p[1]比较的为[Sup,TreeNode]的数据，会出错。
    for basePat in bigL: 
        newFreqSet = preFix.copy()
        newFreqSet.add(basePat)
        freqItemList.append(newFreqSet)
        condPattBases = findPrefixPath(basePat, headerTable)  
        myCondTree, myHead = createFPtree(condPattBases, minSup)  
        if myHead != None:
            mineFPtree(myCondTree, myHead, minSup, newFreqSet, freqItemList)  

initSet = createInitSet(data)
myFPtree, myHeaderTab = createFPtree(initSet,3)
myFreqList = []
mineFPtree(myFPtree, myHeaderTab, 3, set([]), myFreqList)
print("myFreqList\'s length: %s" % len(myFreqList))
for item in myFreqList:
    print(item)

```

找到的频繁集为：
<img src="/img/in-post/FP-Growth/5.png" width="200px" height="150px"/>
